// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BackendForFrontend.Models.EFModels;

public partial class AppDbContext : DbContext
{
    public AppDbContext()
    {
    }

    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AnalyzeActivity> AnalyzeActivities { get; set; }

    public virtual DbSet<AnalyzeOneBook> AnalyzeOneBooks { get; set; }

    public virtual DbSet<AnalyzeSale> AnalyzeSales { get; set; }

    public virtual DbSet<AnalyzeUserInteraction> AnalyzeUserInteractions { get; set; }

    public virtual DbSet<Article> Articles { get; set; }

    public virtual DbSet<Book> Books { get; set; }

    public virtual DbSet<BookPreview> BookPreviews { get; set; }

    public virtual DbSet<BookProduct> BookProducts { get; set; }

    public virtual DbSet<BookReview> BookReviews { get; set; }

    public virtual DbSet<Bookseller> Booksellers { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartDetail> CartDetails { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Category1> Categories1 { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<CouponRedemption> CouponRedemptions { get; set; }

    public virtual DbSet<CouponType> CouponTypes { get; set; }

    public virtual DbSet<EBook> EBooks { get; set; }

    public virtual DbSet<EBooksPermission> EBooksPermissions { get; set; }

    public virtual DbSet<EcpayOrder> EcpayOrders { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Favorite> Favorites { get; set; }

    public virtual DbSet<GroupFunction> GroupFunctions { get; set; }

    public virtual DbSet<GroupPermission> GroupPermissions { get; set; }

    public virtual DbSet<Keyword> Keywords { get; set; }

    public virtual DbSet<LogisticsOrder> LogisticsOrders { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MyCache> MyCaches { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<PdInStock> PdInStocks { get; set; }

    public virtual DbSet<PointsHistory> PointsHistories { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductDetailsCategory> ProductDetailsCategorys { get; set; }

    public virtual DbSet<ProductKeyword> ProductKeywords { get; set; }

    public virtual DbSet<ProductPicture> ProductPictures { get; set; }

    public virtual DbSet<Promotion> Promotions { get; set; }

    public virtual DbSet<PromotionEvent> PromotionEvents { get; set; }

    public virtual DbSet<QtyBookInventory> QtyBookInventories { get; set; }

    public virtual DbSet<QtyflawBook> QtyflawBooks { get; set; }

    public virtual DbSet<Refund> Refunds { get; set; }

    public virtual DbSet<Return> Returns { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<UsedBook> UsedBooks { get; set; }

    public virtual DbSet<UsedBookBuyerInformation> UsedBookBuyerInformations { get; set; }

    public virtual DbSet<UsedBookOrderMessage> UsedBookOrderMessages { get; set; }

    public virtual DbSet<UsedBookPaymentRecord> UsedBookPaymentRecords { get; set; }

    public virtual DbSet<UsedBooksAllocationRecord> UsedBooksAllocationRecords { get; set; }

    public virtual DbSet<UsedBooksCart> UsedBooksCarts { get; set; }

    public virtual DbSet<UsedBooksLogisticsOrder> UsedBooksLogisticsOrders { get; set; }

    public virtual DbSet<UsedBooksOrder> UsedBooksOrders { get; set; }

    public virtual DbSet<UsedBooksOrderDetail> UsedBooksOrderDetails { get; set; }

    public virtual DbSet<UsedBooksReturn> UsedBooksReturns { get; set; }

    public virtual DbSet<WriteBookReview> WriteBookReviews { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseSqlServer("Data Source=fuen31-t3.database.windows.net;Initial Catalog=ProjectDB;User ID=zlk;Password=fuen31t3!;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Chinese_Taiwan_Stroke_CI_AS_KS_WS");

        modelBuilder.Entity<AnalyzeActivity>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_ActivityResults");

            entity.ToTable("AnalyzeActivity");

            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SalesGrowthRate).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AnalyzeOneBook>(entity =>
        {
            entity.ToTable("AnalyzeOneBook");

            entity.Property(e => e.SalesAmount).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Book).WithMany(p => p.AnalyzeOneBooks)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AnalyzeOneBook_Products");
        });

        modelBuilder.Entity<AnalyzeSale>(entity =>
        {
            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Book).WithMany(p => p.AnalyzeSales)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AnalyzeSales_Products");
        });

        modelBuilder.Entity<AnalyzeUserInteraction>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_UserInteractions");

            entity.Property(e => e.InteractionDate).HasColumnType("datetime");
            entity.Property(e => e.InteractionType)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Book).WithMany(p => p.AnalyzeUserInteractions)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AnalyzeUserInteractions_Products");

            entity.HasOne(d => d.Member).WithMany(p => p.AnalyzeUserInteractions)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AnalyzeUserInteractions_Members");
        });

        modelBuilder.Entity<Article>(entity =>
        {
            entity.HasKey(e => e.ArticleID).HasName("PK__tmp_ms_x__9C6270C8E33FD3BA");

            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.EmployeeID).HasDefaultValueSql("((7))");
            entity.Property(e => e.PublishTime)
                .HasDefaultValueSql("('2024/02/06 14:00')")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("(N'這是預設內容')");

            entity.HasOne(d => d.Employee).WithMany(p => p.Articles)
                .HasForeignKey(d => d.EmployeeID)
                .HasConstraintName("FK__Articles__Employ__078C1F06");
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.ToTable("Books", "Books");

            entity.Property(e => e.Author)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Language)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Category).WithMany(p => p.Books)
                .HasForeignKey(d => d.CategoryID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Books_Categories");
        });

        modelBuilder.Entity<BookPreview>(entity =>
        {
            entity.HasKey(e => e.PreviewId);

            entity.Property(e => e.PreviewType).HasMaxLength(50);
            entity.Property(e => e.PreviewURL).HasMaxLength(500);

            entity.HasOne(d => d.Book).WithMany(p => p.BookPreviews)
                .HasForeignKey(d => d.BookId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookPreviews_Books");
        });

        modelBuilder.Entity<BookProduct>(entity =>
        {
            entity.ToTable("BookProducts", "Books");

            entity.Property(e => e.ISBN)
                .IsRequired()
                .HasMaxLength(13);
            entity.Property(e => e.PublishDate).HasColumnType("date");

            entity.HasOne(d => d.Book).WithMany(p => p.BookProducts)
                .HasForeignKey(d => d.BookId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookProducts_Books");

            entity.HasOne(d => d.Product).WithMany(p => p.BookProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_BookProducts_Products");

            entity.HasOne(d => d.Publisher).WithMany(p => p.BookProducts)
                .HasForeignKey(d => d.PublisherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookProducts_Booksellers");
        });

        modelBuilder.Entity<BookReview>(entity =>
        {
            entity.HasKey(e => e.ReviewID).HasName("PK__BookRevi__74BC79AE03C21AA2");

            entity.Property(e => e.ReviewID).ValueGeneratedNever();
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.Rating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReviewTime).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.BookReviews)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BookRevie__Membe__0D44F85C");
        });

        modelBuilder.Entity<Bookseller>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_DepositHistory");

            entity.Property(e => e.ID).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.BankAccount).HasMaxLength(100);
            entity.Property(e => e.ContactPerson)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Carts_1");

            entity.ToTable("Carts", "Orders");

            entity.HasIndex(e => e.MemberId, "FK_MemberId_uniq").IsUnique();

            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Member).WithOne(p => p.Cart)
                .HasForeignKey<Cart>(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Carts_Members");
        });

        modelBuilder.Entity<CartDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CartItem");

            entity.ToTable("CartDetail", "Orders");

            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Cart).WithMany(p => p.CartDetails)
                .HasForeignKey(d => d.CartId)
                .HasConstraintName("FK_CartDetail_Carts");

            entity.HasOne(d => d.Product).WithMany(p => p.CartDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_CartDetail_Products");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.ToTable("Categories", "Books");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Category1>(entity =>
        {
            entity.ToTable("Categories");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Employee).WithMany(p => p.Comments)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_Comments_Employees");

            entity.HasOne(d => d.Post).WithMany(p => p.Comments)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Posts");

            entity.HasOne(d => d.User).WithMany(p => p.Comments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Comments_Members");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponID).HasName("PK__Coupons__384AF1DA6EFC472C");

            entity.Property(e => e.AvailabilityCount).HasDefaultValueSql("((100))");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(16);
            entity.Property(e => e.CouponTypeId).HasDefaultValueSql("((1))");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DiscountValue).HasDefaultValueSql("((10))");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.PromotionID).HasDefaultValueSql("((1))");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.UsingStatus)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.Valid)
                .IsRequired()
                .HasDefaultValueSql("((1))");

            entity.HasOne(d => d.CouponType).WithMany(p => p.Coupons)
                .HasForeignKey(d => d.CouponTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coupons_CouponTypes");
        });

        modelBuilder.Entity<CouponRedemption>(entity =>
        {
            entity.HasKey(e => e.UsageID).HasName("PK__CouponRe__29B197C04755808C");

            entity.ToTable("CouponRedemption");

            entity.Property(e => e.RedemptionDate).HasColumnType("datetime");

            entity.HasOne(d => d.Coupon).WithMany(p => p.CouponRedemptions)
                .HasForeignKey(d => d.CouponID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CouponRed__Coupo__0B5CAFEA");
        });

        modelBuilder.Entity<CouponType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CouponTy__3214EC07289353B6");

            entity.ToTable("CouponType");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EBook>(entity =>
        {
            entity.ToTable("EBooks", "Books");

            entity.Property(e => e.FileLink)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Sample)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.Product).WithMany(p => p.EBooks)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Products_EBooks");
        });

        modelBuilder.Entity<EBooksPermission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_EBooks.Permissions");

            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.PermissionType).HasMaxLength(50);

            entity.HasOne(d => d.Book).WithMany(p => p.EBooksPermissions)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EBooksPermissions_EBooks");

            entity.HasOne(d => d.Member).WithMany(p => p.EBooksPermissions)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EBooksPermissions_Members");
        });

        modelBuilder.Entity<EcpayOrder>(entity =>
        {
            entity.HasKey(e => e.MerchantTradeNo);

            entity.ToTable("EcpayOrders", "Orders");

            entity.Property(e => e.MerchantTradeNo).HasMaxLength(50);
            entity.Property(e => e.MemberID)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);
            entity.Property(e => e.RtnMsg).HasMaxLength(50);
            entity.Property(e => e.TradeDate).HasMaxLength(50);
            entity.Property(e => e.TradeNo)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Position).HasMaxLength(50);
            entity.Property(e => e.VerificationCode).HasMaxLength(6);
            entity.Property(e => e.VerificationCodeExpiration).HasColumnType("datetime");

            entity.HasOne(d => d.Group).WithMany(p => p.Employees)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_GroupPermission");
        });

        modelBuilder.Entity<Favorite>(entity =>
        {
            entity.HasKey(e => e.FavoriteID).HasName("PK__Favorite__CE74FAF5752B63A5");

            entity.HasOne(d => d.Member).WithMany(p => p.Favorites)
                .HasForeignKey(d => d.MemberID)
                .HasConstraintName("FK__Favorites__Membe__43A1090D");
        });

        modelBuilder.Entity<GroupFunction>(entity =>
        {
            entity.ToTable("GroupFunction");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasMany(d => d.Groups).WithMany(p => p.Functions)
                .UsingEntity<Dictionary<string, object>>(
                    "GroupRelationship",
                    r => r.HasOne<GroupPermission>().WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_GroupRelationship_GroupPermission"),
                    l => l.HasOne<GroupFunction>().WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_GroupRelationship_GroupFunction"),
                    j =>
                    {
                        j.HasKey("FunctionId", "GroupId").HasName("PK__GroupRel__80E255CEFD8DC8B1");
                        j.ToTable("GroupRelationship");
                    });
        });

        modelBuilder.Entity<GroupPermission>(entity =>
        {
            entity.ToTable("GroupPermission");

            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Keyword>(entity =>
        {
            entity.ToTable("Keywords", "Books");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<LogisticsOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_LogisticsOreder");

            entity.ToTable("LogisticsOrder", "Orders");

            entity.Property(e => e.RecipientAddress)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientPhone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TrackingNumber)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.LogisticsOrders)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LogisticsOreder_Orders");
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MembersLevel)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ResetToken).HasMaxLength(256);
            entity.Property(e => e.ResetTokenExpiration).HasColumnType("datetime");
            entity.Property(e => e.VerificationCode).HasMaxLength(6);
        });

        modelBuilder.Entity<MyCache>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MyCache__3214EC076DB8598B");

            entity.ToTable("MyCache");

            entity.HasIndex(e => e.ExpiresAtTime, "Index_ExpiresAtTime");

            entity.Property(e => e.Id)
                .HasMaxLength(449)
                .UseCollation("SQL_Latin1_General_CP1_CS_AS");
            entity.Property(e => e.Value).IsRequired();
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.NewsID).HasName("PK__tmp_ms_x__954EBDD33D0CF578");

            entity.Property(e => e.NewsID).HasMaxLength(50);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.PublishTime).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Employee).WithMany(p => p.News)
                .HasForeignKey(d => d.EmployeeID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__News__EmployeeID__0A688BB1");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PhysicalBookOrders");

            entity.ToTable("Orders", "Orders");

            entity.Property(e => e.MerchantTradeNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Member).WithMany(p => p.Orders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Members");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.ToTable("OrderDetails", "Orders");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OrderDetails_Products");
        });

        modelBuilder.Entity<PdInStock>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_InStock");

            entity.ToTable("PdInStock");

            entity.Property(e => e.BuyDate).HasColumnType("datetime");
            entity.Property(e => e.BuyPrice).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Product).WithMany(p => p.PdInStocks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PdInStock_Products");

            entity.HasOne(d => d.Supplier).WithMany(p => p.PdInStocks)
                .HasForeignKey(d => d.SupplierID)
                .HasConstraintName("FK_PdInStock_Bookseller");
        });

        modelBuilder.Entity<PointsHistory>(entity =>
        {
            entity.ToTable("PointsHistory");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ChangeDate).HasColumnType("date");
            entity.Property(e => e.ChangeReason)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Member).WithMany(p => p.PointsHistories)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PointsHistory_Members");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.Property(e => e.Content).IsRequired();
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.Slug)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Author).WithMany(p => p.Posts)
                .HasForeignKey(d => d.AuthorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Posts_Employees");

            entity.HasMany(d => d.Categories).WithMany(p => p.Posts)
                .UsingEntity<Dictionary<string, object>>(
                    "PostCategory",
                    r => r.HasOne<Category1>().WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PostCategories_Categories"),
                    l => l.HasOne<Post>().WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PostCategories_Posts"),
                    j =>
                    {
                        j.HasKey("PostId", "CategoryId");
                        j.ToTable("PostCategories");
                    });

            entity.HasMany(d => d.Tags).WithMany(p => p.Posts)
                .UsingEntity<Dictionary<string, object>>(
                    "PostTag",
                    r => r.HasOne<Tag>().WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PostTags_Tags"),
                    l => l.HasOne<Post>().WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PostTags_Posts"),
                    j =>
                    {
                        j.HasKey("PostId", "TagId");
                        j.ToTable("PostTags");
                    });
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.ToTable(tb => tb.HasTrigger("tr_Products_UpdateDiscountDegree"));

            entity.Property(e => e.Category).IsRequired();
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Offer).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductStatus)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RealPrice)
                .HasComputedColumnSql("([Price]-([Price]*[DiscountDegree])/(100))", false)
                .HasColumnType("decimal(34, 6)");

            entity.HasOne(d => d.DetailsCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.DetailsCategoryId)
                .HasConstraintName("FK_Products_ProductDetailsCategorys");
        });

        modelBuilder.Entity<ProductDetailsCategory>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ProductKeyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BookKeywords");

            entity.HasIndex(e => new { e.ProductId, e.KeywordId }, "ProductKeyword_unique").IsUnique();

            entity.HasOne(d => d.Keyword).WithMany(p => p.ProductKeywords)
                .HasForeignKey(d => d.KeywordId)
                .HasConstraintName("FK_ProductKeywords_Keywords");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductKeywords)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ProductKeywords_ProductKeywords");
        });

        modelBuilder.Entity<ProductPicture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Pictures");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductPictures)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ProductPictures_Products");
        });

        modelBuilder.Entity<Promotion>(entity =>
        {
            entity.HasKey(e => e.PromotionID).HasName("PK__Promotio__52C42F2FFEA38B1F");

            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.PromotionName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<PromotionEvent>(entity =>
        {
            entity.HasKey(e => e.EventID).HasName("PK__Promotio__7944C8709C67447C");

            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.EventDescription).HasMaxLength(500);
            entity.Property(e => e.EventName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.EventSerialNumber)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValueSql("(N'EventCode')");
            entity.Property(e => e.EventType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.OfferStatus)
                .IsRequired()
                .HasMaxLength(100)
                .HasDefaultValueSql("(N'未啟用')");
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("(((2024)/(2))/(6))")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<QtyBookInventory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BookInventory");

            entity.Property(e => e.BuyPrice).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Product).WithMany(p => p.QtyBookInventories)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QtyBookInventories_Products");
        });

        modelBuilder.Entity<QtyflawBook>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_DefectiveItems");

            entity.Property(e => e.Handler)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.HandlingDate).HasColumnType("datetime");
            entity.Property(e => e.HandlingMethod)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Book).WithMany(p => p.QtyflawBooks)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QtyflawBooks_Products");
        });

        modelBuilder.Entity<Refund>(entity =>
        {
            entity.ToTable("Refund", "Orders");

            entity.Property(e => e.ApplicationDate).HasColumnType("datetime");
            entity.Property(e => e.RefundStatus)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.Refunds)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Refund_Orders");
        });

        modelBuilder.Entity<Return>(entity =>
        {
            entity.ToTable("Return", "Orders");

            entity.Property(e => e.ProcessdDate).HasColumnType("date");
            entity.Property(e => e.ReturnDate).HasColumnType("date");
            entity.Property(e => e.ReturnReason)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.LogisticsOrder).WithMany(p => p.Returns)
                .HasForeignKey(d => d.LogisticsOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Return_LogisticsOreder");

            entity.HasOne(d => d.Member).WithMany(p => p.Returns)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Return_Members");

            entity.HasOne(d => d.Order).WithMany(p => p.Returns)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Return_Orders");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Transaction");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UsedBook>(entity =>
        {
            entity.ToTable("UsedBooks", "Books");

            entity.Property(e => e.Authors).HasMaxLength(50);
            entity.Property(e => e.BookStatus)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.ISBN)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PublishDate).HasColumnType("date");
            entity.Property(e => e.PublisherName).HasMaxLength(50);
            entity.Property(e => e.ReleaseDate).HasColumnType("date");
            entity.Property(e => e.SmallPicture).HasMaxLength(500);
            entity.Property(e => e.SmallThumbnailPicture).HasMaxLength(500);
            entity.Property(e => e.ThumbnailPicture).HasMaxLength(500);

            entity.HasOne(d => d.Category).WithMany(p => p.UsedBooks)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_UsedBooks_Categories");

            entity.HasOne(d => d.Member).WithMany(p => p.UsedBooks)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooks_Members");
        });

        modelBuilder.Entity<UsedBookBuyerInformation>(entity =>
        {
            entity.ToTable("UsedBookBuyerInformation");

            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecipientAddress)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientEmail).HasMaxLength(50);
            entity.Property(e => e.RecipientName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientPhone)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UsedBookOrderMessage>(entity =>
        {
            entity.Property(e => e.DateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UsedBookPaymentRecord>(entity =>
        {
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UsedBooksAllocationRecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsedBooks.AllocationRecords");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AllocationAccount)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Member).WithMany(p => p.UsedBooksAllocationRecords)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksAllocationRecords_Members");

            entity.HasOne(d => d.Order).WithMany(p => p.UsedBooksAllocationRecords)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksAllocationRecords_UsedBooksOrders");
        });

        modelBuilder.Entity<UsedBooksCart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsedBooks.Cart");

            entity.ToTable("UsedBooksCart");

            entity.Property(e => e.AddToCartDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Book).WithMany(p => p.UsedBooksCarts)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksCart_UsedBooks");

            entity.HasOne(d => d.Member).WithMany(p => p.UsedBooksCarts)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksCart_Members");
        });

        modelBuilder.Entity<UsedBooksLogisticsOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsedBooksLogisticsOreder");

            entity.ToTable("UsedBooksLogisticsOrder");

            entity.Property(e => e.LogisticsCompany)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.PickupMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.RecipientAddress)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipientPhone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SenderAddress)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SenderName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SenderPhone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TrackingNumber)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.UsedBooksLogisticsOrders)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksLogisticsOrder_UsedBooksOrders");
        });

        modelBuilder.Entity<UsedBooksOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsedBooks.Orders");

            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Buyer).WithMany(p => p.UsedBooksOrderBuyers)
                .HasForeignKey(d => d.BuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksOrders_Members");

            entity.HasOne(d => d.Seller).WithMany(p => p.UsedBooksOrderSellers)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksOrders_Members1");
        });

        modelBuilder.Entity<UsedBooksOrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UsedBooks.OrderDetails");

            entity.HasOne(d => d.Book).WithMany(p => p.UsedBooksOrderDetails)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksOrderDetails_UsedBooks");

            entity.HasOne(d => d.Order).WithMany(p => p.UsedBooksOrderDetails)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksOrderDetails_UsedBooksOrders");
        });

        modelBuilder.Entity<UsedBooksReturn>(entity =>
        {
            entity.ToTable("UsedBooksReturn");

            entity.Property(e => e.ApplicationDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ReturnReason)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Order).WithMany(p => p.UsedBooksReturns)
                .HasForeignKey(d => d.OrderID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsedBooksReturn_UsedBooksOrders");
        });

        modelBuilder.Entity<WriteBookReview>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_BookReviews");

            entity.Property(e => e.ReviewContent).IsRequired();
            entity.Property(e => e.ReviewDate).HasColumnType("datetime");

            entity.HasOne(d => d.Book).WithMany(p => p.WriteBookReviews)
                .HasForeignKey(d => d.BookID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WriteBookReviews_Products");

            entity.HasOne(d => d.Member).WithMany(p => p.WriteBookReviews)
                .HasForeignKey(d => d.MemberID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_WriteBookReviews_Members");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}